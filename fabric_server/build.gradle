plugins {
    id 'common-loom' version "${common_loom_version}"
    id 'com.github.johnrengelman.shadow' version "${shadow_version}"
}

archivesBaseName = project.archives_base_name
version = mod_version
group = maven_group

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version as int)
sourceCompatibility = JavaLanguageVersion.of(java_version as int)
targetCompatibility = JavaLanguageVersion.of(java_version as int)

loom {
    customManifest.set(custom_manifest_url)

    intermediaryUrl = "https://github.com/BluSpring/maven-repo/raw/main/xyz/bluspring/intermediary/empty/intermediary-empty.jar"
    serverOnlyMinecraftJar()
}

repositories {
    mavenCentral()
    maven { url = 'https://maven.fabricmc.net/' }
    maven { url = 'https://maven.terraformersmc.com/' }
    maven { url = 'https://maven.shedaniel.me/' }
    maven { url = 'https://maven.maxhenkel.de/repository/public' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://repo.viaversion.com/' }
    maven { url = 'https://maven.bluspring.xyz/' }
    mavenLocal()
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "org.mcphackers:retromcp:${minecraft_version}-server"

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    implementation project(path: ":common_client", configuration: "namedElements")
    implementation project(path: ":common_client", configuration: "namedElements")

    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    shadow(implementation("de.maxhenkel.lame4j:lame4j:${lame4j_version}"))
    shadow(implementation("de.maxhenkel.rnnoise4j:rnnoise4j:${rnnoise4j_version}"))
    shadow(implementation("org.concentus:Concentus:${concentus_version}"))
    shadow(implementation("de.maxhenkel.opus4j:opus4j:${opus4j_version}"))
    shadow(implementation("de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"))

    shadow(implementation('org.apache.logging.log4j:log4j-api:2.20.0'))
    shadow(implementation('org.apache.logging.log4j:log4j-core:2.20.0'))
    shadow(implementation("com.google.guava:guava:31.1-jre"))
    shadow(implementation('com.google.code.gson:gson:2.10.1'))
    shadow(implementation('commons-io:commons-io:2.12.0'))

    shadow(implementation(project(":api")))
}

tasks.register('generateJava', Copy) {
    from project(':common_client').file('src/template/java')
    into "${buildDir}/generated/java"
    expand 'compatibility_version': mod_compatibility_version
}

sourceSets.main.java {
    srcDir "${buildDir}/generated/java"
}
compileJava.dependsOn generateJava
generateJava.dependsOn('sourcesJar')

processResources {
    filesMatching('fabric.mod.json') {
        expand 'mod_id': mod_id,
                'mod_name': mod_name,
                'mod_vendor': mod_vendor,
                'mod_version': mod_version,
                'java_version': java_version,
                'minecraft_dependency': minecraft_dependency,
                'fabric_loader_version': fabric_loader_version
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(':common_client').sourceSets.main.allSource)
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = java_version as int
}

java {
    withSourcesJar()
}

jar {
    from('LICENSE') {
        rename { "${it}_${archivesBaseName}" }
    }
}


shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier = 'shadow-dev'
    relocate 'de.maxhenkel.configbuilder', "de.maxhenkel.${mod_id}.configbuilder"
    relocate 'org.concentus', "de.maxhenkel.${mod_id}.concentus"
    dependencies {
        exclude(dependency('com.google.code.findbugs:jsr305'))
    }
}

remapJar {
    dependsOn shadowJar
    inputFile = shadowJar.archiveFile.get()
}